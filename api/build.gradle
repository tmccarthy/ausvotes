plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
}

apply plugin: au.id.tmm.ausvotes.buildsrc.MyScalaPlugin
apply plugin: 'idea'

apply plugin: 'com.bmuschko.docker-remote-api'
repositories { jcenter() }

def unfilteredVersion = '0.10.0-M2'

dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
    }
}

sourceSets {
    generated {}
}

configurations {
    compile {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
}

dependencies {
    compile sourceSets.generated.output

    compile project(':core')
    compile project(':shared:io')
    compile project(':shared:recountResources')
    compile project(':shared:testAws')

    compile "ws.unfiltered:unfiltered-filter-async${s}:$unfilteredVersion"
    compile "ws.unfiltered:unfiltered-netty-server${s}:$unfilteredVersion"

    compile "au.id.tmm:http-constants-core${s}:$httpConstantsVersion"

    compile 'ch.qos.logback:logback-classic:1.0.13'

    testCompile project(':shared:testIo')
}

idea {
    module {
        generatedSourceDirs.addAll(sourceSets.generated.resources.srcDirs)
    }
}

task writeVersionResource {
    doLast {
        def resourcesDir = sourceSets.generated.resources.srcDirs.first()
        def versionFile = new File(resourcesDir, 'version.txt')
        versionFile.write(version.toString(), 'UTF-8')
    }
}

tasks.processGeneratedResources.dependsOn(writeVersionResource)

tasks.jar {
    from sourceSets.generated.output
    manifest {
        attributes(
            'Class-Path': configurations.compile.collect { "lib/$it.name" }.join(' '),
            'Main-Class': 'au.id.tmm.ausvotes.api.Api'
        )
    }
}

task createDockerContext(type: Copy, group: 'build') {
    dependsOn tasks.assemble

    from(configurations.runtime) {
        into 'opt/app/lib'
        include '**/*.jar'
    }

    from(sourceSets.generated.output) {
        include 'version.txt'
        into 'opt/app'
    }

    from(tasks.jar) {
        into 'opt/app'

        rename {
            "${project.name}.jar"
        }
    }

    from file('docker')

    destinationDir = new File(buildDir, 'docker-context')
}

task dockerBuild(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
    dependsOn tasks.createDockerContext

    def tagVersion = version.toString().replace("+", "-")

    inputDir = tasks.createDockerContext.destinationDir
    tag = "au.id.tmm.ausvotes.$project.name:$tagVersion".toString()
}
